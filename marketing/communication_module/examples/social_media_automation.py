#!/usr/bin/env python3
"""
Exemple d'automatisation des r√©seaux sociaux pour Le Vieux Moulin.

Ce script montre comment utiliser le module de communication pour automatiser
la cr√©ation et la publication de contenu sur les r√©seaux sociaux.
"""

import os
import sys
import asyncio
import datetime
import logging
from typing import Dict, List, Any

# Ajout du r√©pertoire parent au PYTHONPATH pour l'importation des modules
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from src.common import Config, setup_logger
from src.orchestrator import get_orchestrator
from src.social_media import SocialMediaManager


async def publish_menu_of_the_day():
    """
    Publie le menu du jour sur les r√©seaux sociaux.
    """
    # Initialisation de la configuration et des loggers
    config = Config("../config/settings.json")
    logger = setup_logger("social_example", "INFO")
    
    # Obtention de l'orchestrateur
    orchestrator = get_orchestrator(config)
    
    # Cr√©ation du contenu du menu du jour
    today = datetime.datetime.now().strftime("%A %d %B %Y")
    
    menu_content = {
        "title": f"Menu du jour - {today}",
        "body": "Aujourd'hui au Vieux Moulin, notre chef vous propose :\n\n" +
                "ü•ó Entr√©e : Salade de ch√®vre chaud aux noix et miel\n" +
                "üçñ Plat : Magret de canard aux figues et pommes sarladaises\n" +
                "üçÆ Dessert : Tarte fine aux pommes et caramel au beurre sal√©\n\n" +
                "R√©servez votre table d√®s maintenant !",
        "media_url": "https://example.com/images/menu_jour.jpg",
        "hashtags": ["menudujour", "gastronomie", "vieuxmoulin", "vensac"]
    }
    
    # Publication sur les r√©seaux sociaux
    await orchestrator.publish_to_social_media(
        content=menu_content,
        platforms=["facebook", "instagram"],
        scheduled_time=get_optimal_posting_time()
    )
    
    logger.info(f"Menu du jour programm√© pour publication sur Facebook et Instagram")


async def publish_weekly_promotion():
    """
    Publie la promotion hebdomadaire sur les r√©seaux sociaux.
    """
    # Initialisation de la configuration et des loggers
    config = Config("../config/settings.json")
    logger = setup_logger("social_example", "INFO")
    
    # Obtention directe du gestionnaire des r√©seaux sociaux
    social_media = SocialMediaManager(config)
    
    # Cr√©ation du contenu pour la promotion hebdomadaire
    promo_content = {
        "title": "Offre sp√©ciale du week-end !",
        "body": "Ce week-end au Vieux Moulin, profitez de notre formule sp√©ciale :\n\n" +
                "üëâ Menu complet (entr√©e + plat + dessert) √† 29‚Ç¨ au lieu de 39‚Ç¨\n" +
                "üëâ Une coupe de champagne offerte pour toute r√©servation en ligne\n\n" +
                "Offre valable uniquement ce week-end, sur r√©servation.",
        "media_url": "https://example.com/images/weekend_promo.jpg",
        "hashtags": ["promotion", "weekend", "vieuxmoulin", "bonplan"]
    }
    
    # Publication sur plusieurs plateformes avec timing optimis√©
    await social_media.publish_content_async(
        content=promo_content,
        platforms=["facebook", "instagram", "twitter"],
        scheduled_time=get_optimal_posting_time(target_hour=18)  # Publier √† 18h
    )
    
    logger.info(f"Promotion hebdomadaire programm√©e pour publication sur plusieurs plateformes")


async def schedule_monthly_content_calendar():
    """
    Planifie un calendrier mensuel de contenus pour les r√©seaux sociaux.
    """
    # Initialisation de la configuration et des loggers
    config = Config("../config/settings.json")
    logger = setup_logger("social_example", "INFO")
    
    # Obtention de l'orchestrateur
    orchestrator = get_orchestrator(config)
    
    # G√©n√©ration d'un calendrier de contenu pour le mois
    today = datetime.datetime.now()
    current_month = today.month
    current_year = today.year
    
    # D√©finition des th√®mes hebdomadaires
    weekly_themes = [
        "Sp√©cialit√©s r√©gionales",
        "Rencontre avec nos producteurs",
        "Cocktails et accords mets-vins",
        "Secrets de cuisine du chef"
    ]
    
    # Cr√©er le calendrier de contenu
    calendar = []
    
    # Commencer au d√©but du mois prochain
    next_month_start = datetime.datetime(current_year, current_month, 1) + datetime.timedelta(days=32)
    next_month_start = datetime.datetime(next_month_start.year, next_month_start.month, 1)
    
    # G√©n√©rer des publications pour chaque semaine du mois
    for week in range(4):
        theme = weekly_themes[week]
        
        # D√©finir les jours de publication (lundi, mercredi, vendredi)
        for weekday in [0, 2, 4]:  # 0=Lundi, 2=Mercredi, 4=Vendredi
            # Calculer la date de publication
            current_date = next_month_start + datetime.timedelta(days=7*week + weekday)
            
            # Cr√©er le contenu en fonction du th√®me
            content = create_themed_content(theme, current_date)
            
            # Ajouter au calendrier
            calendar.append({
                "date": current_date.isoformat(),
                "content": content,
                "platforms": ["facebook", "instagram"]
            })
    
    # Programmer chaque publication
    for entry in calendar:
        await orchestrator.publish_to_social_media(
            content=entry["content"],
            platforms=entry["platforms"],
            scheduled_time=entry["date"]
        )
    
    logger.info(f"Calendrier de contenu programm√© pour le mois prochain: {len(calendar)} publications")


def create_themed_content(theme: str, date: datetime.datetime) -> Dict[str, Any]:
    """
    Cr√©e un contenu th√©matique pour les r√©seaux sociaux.
    
    Args:
        theme: Th√®me de la publication
        date: Date de la publication
        
    Returns:
        Contenu format√© pour la publication
    """
    # Formater la date
    formatted_date = date.strftime("%d/%m/%Y")
    
    # Cr√©er un contenu adapt√© au th√®me
    if theme == "Sp√©cialit√©s r√©gionales":
        return {
            "title": f"Sp√©cialit√©s r√©gionales - {formatted_date}",
            "body": "D√©couvrez aujourd'hui l'une de nos sp√©cialit√©s locales : le grenier m√©docain.\n\n" +
                    "Cette charcuterie typique du M√©doc est √©labor√©e selon une recette traditionnelle, " +
                    "transmise de g√©n√©ration en g√©n√©ration. √Ä d√©guster en entr√©e avec un bon verre de vin rouge local.",
            "media_url": "https://example.com/images/grenier_medocain.jpg",
            "hashtags": ["gastronomie", "m√©doc", "sp√©cialit√©r√©gionale", "vieuxmoulin"]
        }
    elif theme == "Rencontre avec nos producteurs":
        return {
            "title": f"Nos producteurs - {formatted_date}",
            "body": "Rencontrez Jean-Pierre, ostr√©iculteur √† Arcachon depuis 30 ans.\n\n" +
                    "Ses hu√Ætres d'exception, s√©lectionn√©es avec soin, sont servies dans notre restaurant. " +
                    "Une fra√Æcheur incomparable qui fait la renomm√©e de notre plateau de fruits de mer.",
            "media_url": "https://example.com/images/ostreiculteur.jpg",
            "hashtags": ["producteurlocal", "circuit-court", "huitres", "vieuxmoulin"]
        }
    elif theme == "Cocktails et accords mets-vins":
        return {
            "title": f"Accord mets-vins - {formatted_date}",
            "body": "Notre sommelier vous sugg√®re : un Saint-Est√®phe 2018 pour accompagner notre c√¥te de b≈ìuf.\n\n" +
                    "Ce vin puissant aux tanins fondus s'accorde parfaitement avec la saveur cors√©e de notre viande " +
                    "de race Bazadaise, pour une explosion de saveurs en bouche.",
            "media_url": "https://example.com/images/accord_vin.jpg",
            "hashtags": ["vin", "accord", "gastronomie", "vieuxmoulin"]
        }
    else:  # Secrets de cuisine du chef
        return {
            "title": f"Les secrets du chef - {formatted_date}",
            "body": "L'astuce du chef pour une sauce b√©arnaise parfaite ?\n\n" +
                    "Incorporer le beurre clarifi√© tr√®s progressivement, sans cesser de fouetter, et √† temp√©rature stable. " +
                    "Un secret simple mais essentiel pour une onctuosit√© incomparable.",
            "media_url": "https://example.com/images/sauce_bearnaise.jpg",
            "hashtags": ["astucedechef", "cuisine", "gastronomie", "vieuxmoulin"]
        }


def get_optimal_posting_time(target_hour: int = None) -> str:
    """
    D√©termine l'heure optimale pour une publication.
    
    Args:
        target_hour: Heure cible sp√©cifique (optionnelle)
        
    Returns:
        Horodatage ISO 8601 pour la publication
    """
    now = datetime.datetime.now()
    
    if target_hour is not None:
        # Utiliser l'heure cible sp√©cifi√©e
        target_hour = target_hour
    else:
        # D√©terminer l'heure optimale selon le jour de la semaine
        weekday = now.weekday()
        
        if weekday < 5:  # Lundi-Vendredi
            target_hour = 12  # Midi pour la pause d√©jeuner en semaine
        else:  # Weekend
            target_hour = 11  # 11h le weekend
    
    # Si l'heure actuelle est apr√®s l'heure cible, planifier pour le lendemain
    if now.hour >= target_hour:
        target_date = now.date() + datetime.timedelta(days=1)
    else:
        target_date = now.date()
    
    target_time = datetime.datetime.combine(
        target_date,
        datetime.time(hour=target_hour, minute=0)
    )
    
    return target_time.isoformat()


async def main():
    """
    Fonction principale ex√©cutant les exemples.
    """
    # Configuration du logger
    logger = setup_logger("social_example", "INFO")
    logger.info("D√©marrage des exemples d'automatisation des r√©seaux sociaux...")
    
    # Ex√©cution des exemples
    await publish_menu_of_the_day()
    await publish_weekly_promotion()
    await schedule_monthly_content_calendar()
    
    logger.info("Exemples termin√©s avec succ√®s")


if __name__ == "__main__":
    # Ex√©cution du code asynchrone
    asyncio.run(main())
